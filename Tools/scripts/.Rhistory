c(1, 4, 2, 9)
test <- c(1, 4, 2, 9)
test
commandArgs help
commandArgs -help
help commandArgs
help
help(commandArgs)
test
library(oro.nifti); 
library(plyr);
install.packages(plyr)
install.packages("plyr")
sudo install.packages("plyr")
q()
help(t.test)
 nonsmokers = c(18,22,21,17,20,17,23,20,22,21)
smokers = c(16,20,14,21,20,18,13,15,17,21)
plot(density(nonsmokers))
plot(density(smokers))
plot(density(smokers))
boxplot(nonsmokers,smokers,ylab="Scores on Digit Span Task",
+         names=c("nonsmokers","smokers"),
+         main="Digit Span Performance by\n Smoking Status")
boxplot(nonsmokers,smokers,ylab="Scores on Digit Span Task", names=c("nonsmokers","smokers"),main="Digit Span Performance by\n Smoking Status")
dim
dim1 <- c(182, 92, 182)
id <- ("a", "b", "c", "d")
id <- c("a", "b", "c", "d")
big <- array(NA, c(dim1, length(id)))
big
help(aaply)
help(aapply)
library("plyr")
help(aaply)
help(srow
)
help(srow_x)
library("oro.nifti")
help(srow_x)
q()
help(srow_x)
library("oro.nifti")
help(aaply)
library("plyr")
mni1 <- readNIfTI("/home/tolhs/TestDisconnectome/testR/nifti1/lesionpatient1.nii.gz")
mni1 <- readNIfTI("/home/tolhs/TestDisconnectome/testR/nifti2/HM_Lesion.nii.gz")
big <- array(NA, c(dim1, 2))
big[,,,1] <- mni
big[,,,1] <- mni1
dim1
dim1 <- dim(mni1)
dim1
dim2 <- dim(mni2)
mni1 <- readNIfTI("/home/tolhs/TestDisconnectome/testR/nifti1/lesionpatient1.nii.gz")
mni2 <- readNIfTI("/home/tolhs/TestDisconnectome/testR/nifti2/HM_Lesion.nii.gz")
dim2 <- dim(mni2)
dim2
big <- array(NA, c(dim1, 2))
big[,,,1] <- mni
big[,,,1] <- mni1
big[,,,2] <- mni2
getT <- function(x) {    # function to calculate the t-test at each voxel and return the t value
  # we can't calculate a t-test if variance is zero, so check before trying.
  if (var(x) == 0) { stat <- NA; } else { stat <- t.test(x, alternative="greater", mu=0.5)$statistic; }
  
  return(stat)
}
out <- aaply(big, c(1, 2, 3), getT);
out <- aply(big, c(1, 2, 3), getT);
out <- apply(big, c(1, 2, 3), getT);
help(mcapply)
library(parallel)
help(mcapply)
help(mclapply)
help(parallel)
help(library = parallel)
help(library = "parallel")
help(parallel)
library(help =
     "parallel")
help(mcparallel)
install.packages("doParallel")
q()
q()
